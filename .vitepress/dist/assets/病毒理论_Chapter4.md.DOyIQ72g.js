import{_ as t,c as l,o as i,a1 as s}from"./chunks/framework.BwTyoF0R.js";const a="/assets/Untitled%2054.c--jK48b.png",e="/assets/Untitled%2055.BDZSJtO1.png",p="/assets/Untitled%2056.B-ETh_li.png",n="/assets/Untitled%2057.BuApTFqB.png",r="/assets/Untitled%2058.CJGg-Tk6.png",o="/assets/Untitled%2059.AU9Tekib.png",d="/assets/Untitled%2060.89Bxt90X.png",c="/assets/Untitled%2061.T3R5QB9K.png",m="/assets/Untitled%2062.CbY5hw55.png",u="/assets/Untitled%2063.D_SKOkbW.png",_="/assets/Untitled%2064.DZbuuXW3.png",h="/assets/Untitled%2065.BFHlLN07.png",g="/assets/Untitled%2066.CrAzQmrY.png",U="/assets/Untitled%2067.DO89ga-w.png",b="/assets/Untitled%2068.CrxNslsg.png",q="/assets/Untitled%2069.DbRve1Ak.png",f="/assets/Untitled%2070.WRZnXD3o.png",k="/assets/Untitled%2071.Bg16OrMM.png",x="/assets/Untitled%2072.BykNspBk.png",P="/assets/Untitled%2073.BhAAAgY-.png",B="/assets/Untitled%2074.CEtk8yu8.png",C="/assets/Untitled%2075.D0RmchUk.png",D="/assets/Untitled%2076.RdroGNtg.png",A="/assets/Untitled%2077.BuBajN2R.png",T="/assets/Untitled%2078.Dq4YK0--.png",S="/assets/Untitled%2079.iz9DYZCr.png",j="/assets/Untitled%2080.BaSl6EAc.png",N="/assets/Untitled%2081.DtIuQcQC.png",Z=JSON.parse('{"title":"第四章 dos下的病毒","description":"","frontmatter":{},"headers":[],"relativePath":"病毒理论/Chapter4.md","filePath":"病毒理论/Chapter4.md"}'),R={name:"病毒理论/Chapter4.md"},v=s('<h1 id="第四章-dos下的病毒" tabindex="-1">第四章 dos下的病毒 <a class="header-anchor" href="#第四章-dos下的病毒" aria-label="Permalink to &quot;第四章 dos下的病毒&quot;">​</a></h1><h2 id="实模式" tabindex="-1">实模式 <a class="header-anchor" href="#实模式" aria-label="Permalink to &quot;实模式&quot;">​</a></h2><p><img src="'+a+'" alt="Untitled"></p><h2 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;debug&quot;">​</a></h2><aside> 🤔 验证CS:IP是下一条将执行的指令 <p><img src="'+e+'" alt="Untitled"></p></aside><p><img src="'+p+'" alt="Untitled"></p><h2 id="com格式" tabindex="-1">com格式 <a class="header-anchor" href="#com格式" aria-label="Permalink to &quot;com格式&quot;">​</a></h2><p><img src="'+n+'" alt="Untitled"></p><h2 id="寄生" tabindex="-1">寄生 <a class="header-anchor" href="#寄生" aria-label="Permalink to &quot;寄生&quot;">​</a></h2><h3 id="头寄生" tabindex="-1">头寄生 <a class="header-anchor" href="#头寄生" aria-label="Permalink to &quot;头寄生&quot;">​</a></h3><p><img src="'+r+'" alt="Untitled"></p><p><img src="'+o+'" alt="Untitled"></p><ul><li><p>直接Virus+Normal会导致Virus ret后停止</p></li><li><p>把 ret 变成nop，会运行数据段</p><blockquote><p>原来数据和指令可以放在一起，原来cpu没有能力区分数据和指令的区别</p></blockquote><ul><li><p>把Message汇编提前，发现确实是数据段</p><p><img src="'+d+'" alt="Untitled"></p><p><img src="'+c+'" alt="Untitled"></p></li><li><p>解决方法：构造jmp</p></li></ul></li><li><p>构造jmp后，发现没打印成功</p><p><img src="'+m+'" alt="Untitled"></p><p><img src="'+u+'" alt="Untitled"></p><ul><li><p>原因：省流，normal没有重定位</p></li><li><p>解决方法：virus运行后把normal拷贝到100h</p><p><img src="'+_+'" alt="Untitled"></p></li><li><p>结果</p><p><img src="'+h+'" alt="Untitled"></p></li></ul></li><li><p>加入int16，获取键盘输入</p></li><li><p>感染系统com</p><ul><li><p>省流：程序死了，edit.com有413字节，拷贝的时候把拷贝指令给覆盖掉里，6。</p></li><li><p>解决方法：必须先将拷贝代码拷贝到感染程序之后</p><p>现在的流程就变成了：运行病毒程序→运行拷贝”拷贝代码“的程序，jmp到新的拷贝代码，运行拷贝代码来拷贝病毒程序。</p></li></ul></li></ul><h3 id="尾寄生" tabindex="-1">尾寄生 <a class="header-anchor" href="#尾寄生" aria-label="Permalink to &quot;尾寄生&quot;">​</a></h3><p>先跑normal，再跑virus</p><ul><li><p>获取偏差值</p><p><img src="'+g+'" alt="Untitled"></p></li><li><p>自己重定位</p><p><img src="'+U+'" alt="Untitled"></p></li><li><p>jmp覆盖头部</p><p><img src="'+b+'" alt="Untitled"></p></li><li><p>完整版</p><p><img src="'+q+'" alt="Untitled"></p><ul><li>流程： <ul><li>填写overridecode字段，保存将被覆盖的三个字节</li><li>填写infectedsize字段，保存被感染文件本身的大小</li><li>填写头三个字节的jmp指令</li><li>运行被感染程序</li></ul></li></ul></li></ul><h3 id="逆插入感染" tabindex="-1">逆插入感染 <a class="header-anchor" href="#逆插入感染" aria-label="Permalink to &quot;逆插入感染&quot;">​</a></h3><p><img src="'+f+'" alt="Untitled"></p><ul><li>病毒：执行第一部分，jmp到第二部分</li><li>病毒：第二部分开始先把normal拷贝到正确位置，而后执行第二部分，jmp到normal</li><li>normal：执行</li><li>使用文件读写的中断修改特定内容</li></ul><p><img src="'+k+'" alt="Untitled"></p><p><img src="'+x+'" alt="Untitled"></p><p><img src="'+P+'" alt="Untitled"></p><ul><li>省流，头部和尾部的病毒代码都要重定位。</li></ul><h3 id="引导区病毒" tabindex="-1">引导区病毒 <a class="header-anchor" href="#引导区病毒" aria-label="Permalink to &quot;引导区病毒&quot;">​</a></h3><ul><li>感染引导区，替换引导区原始的引导代码，从而获得执行。之后还原被修改的引导区，并将执行权限交给原来的引导代码，从而保持正常的工作</li><li>要做的事情： <ul><li>将原来引导区内的内容全部保存到空闲的簇里，并把该簇在fat表上的位置修改为0xfff。→只修改引导记录后面的部分就好</li><li>把要执行的内容copy到引导区（为了不重定位，直接加入填充字节直到代码处）</li><li>结束时将空闲簇原来的引导内容copy回7c00</li></ul></li></ul><p><img src="'+B+'" alt="Untitled"></p><h2 id="链式病毒" tabindex="-1">链式病毒 <a class="header-anchor" href="#链式病毒" aria-label="Permalink to &quot;链式病毒&quot;">​</a></h2><ul><li>只保留一份病毒拷贝，利用文件目录项，将受感染文件的头簇指向病毒。</li></ul><p><img src="'+C+'" alt="Untitled"></p><p><img src="'+D+'" alt="Untitled"></p><ul><li><p>病毒启动</p><ul><li>加载的是病毒的首簇并执行</li><li>病毒获取执行程序的名字，获取对应目录项，并在保留字段内获取原簇号，并加载（加载原程序的病毒代码可能被原程序覆盖）</li><li>跳到原文件执行</li></ul></li><li><p>病毒感染</p><ul><li><p>首次感染，放到空闲扇区</p></li><li><p>将被感染文件首簇存目录项保留段</p></li><li><p>修改首簇号指向病毒的首簇，同时被感染文件的大小修改为病毒的真实大小。</p><p><img src="'+A+'" alt="Untitled"></p></li></ul></li><li><p>Getexe获取执行文件名：</p></li></ul><p><img src="'+T+'" alt="Untitled"></p><ul><li>GetInfectedSector获取被感染文件原扇区号的函数</li><li>FindRootDirEntry在根目录获取指定文件名的目录项</li></ul><h2 id="中断向量替换" tabindex="-1">中断向量替换 <a class="header-anchor" href="#中断向量替换" aria-label="Permalink to &quot;中断向量替换&quot;">​</a></h2><ul><li>步骤 <ul><li>识别中断向量和中断表</li><li>非驻留式的中断向量修改</li><li>驻留式中断向量修改</li></ul></li></ul><p><img src="'+S+'" alt="Untitled"></p><ul><li><p>中断向量表</p><p><img src="'+j+'" alt="Untitled"></p><ul><li>不少中断处理程序来自一个段</li></ul></li><li><p>中断处理程序：根据表项定位地址</p></li><li><p>驻留？不用驻留</p><p>中断处理程序要为所有程序服务，所以它的特点就是不退出一直驻留在内存中。</p></li></ul><h3 id="感染" tabindex="-1">感染 <a class="header-anchor" href="#感染" aria-label="Permalink to &quot;感染&quot;">​</a></h3><p><img src="'+N+'" alt="Untitled"></p><h3 id="驻留式中断向量修改" tabindex="-1">驻留式中断向量修改 <a class="header-anchor" href="#驻留式中断向量修改" aria-label="Permalink to &quot;驻留式中断向量修改&quot;">​</a></h3><ul><li>使用dos系统提供的终端调用</li></ul>',41),E=[v];function y(I,O,V,Y,G,K){return i(),l("div",null,E)}const $=t(R,[["render",y]]);export{Z as __pageData,$ as default};
