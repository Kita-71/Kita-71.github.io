import{_ as l,c as i,o as t,a1 as a}from"./chunks/framework.BwTyoF0R.js";const e="/assets/Untitled.COu23rth.png",s="/assets/Untitled%201.Ctjjo1JT.png",r="/assets/Untitled%202.QMgNc7QD.png",o="/assets/Untitled%203.h_9xzt2w.png",n="/assets/Untitled%204.BBCUM3_Q.png",p="/assets/Untitled%205.50fWzIW-.png",u="/assets/Untitled%206.C4eENIC4.png",h="/assets/Untitled%207.Bpgjkhjy.png",c="/assets/Untitled%208.5lgLyAr9.png",d="/assets/Untitled%209.D_-lzM_j.png",m="/assets/Untitled%2010.Nyoz4y-f.png",_="/assets/Untitled%2011.D2C_i3hG.png",b="/assets/Untitled%2012.CeFeB_83.png",q="/assets/Untitled%2013.46vHzqfu.png",g="/assets/Untitled%2014.Qg0sXULv.png",N=JSON.parse('{"title":"Chapter-1-Base","description":"","frontmatter":{},"headers":[],"relativePath":"计算机图形学/Chapter-1-Base.md","filePath":"计算机图形学/Chapter-1-Base.md"}'),f={name:"计算机图形学/Chapter-1-Base.md"},U=a('<h1 id="chapter-1-base" tabindex="-1">Chapter-1-Base <a class="header-anchor" href="#chapter-1-base" aria-label="Permalink to &quot;Chapter-1-Base&quot;">​</a></h1><h2 id="section1" tabindex="-1">Section1 <a class="header-anchor" href="#section1" aria-label="Permalink to &quot;Section1&quot;">​</a></h2><h3 id="图形学定义" tabindex="-1">图形学定义 <a class="header-anchor" href="#图形学定义" aria-label="Permalink to &quot;图形学定义&quot;">​</a></h3><p>通过计算机生成、控制、存储物体及其图像，即建模和渲染</p><h3 id="图形学主要内容" tabindex="-1">图形学主要内容 <a class="header-anchor" href="#图形学主要内容" aria-label="Permalink to &quot;图形学主要内容&quot;">​</a></h3><p>建模——三维物体的计算机表示：形状表述和定义</p><p>渲染——三维物体的二维表示：通过矩阵变换生成几何物体的二维图像</p><p>动画——快速显示的图像序列或动作序列</p><h3 id="图形和图像" tabindex="-1">图形和图像 <a class="header-anchor" href="#图形和图像" aria-label="Permalink to &quot;图形和图像&quot;">​</a></h3><p>图形——场景的几何模型和景物的物理属性</p><ul><li>点线面体......</li><li>灰度、色彩、线型、线宽......</li></ul><p>图像</p><ul><li>广义：所有具有视觉效果的画面</li><li>数学：f(x,y)的值——灰度或RGB（强度）</li><li>数字图像：x,y,f(x,y)都是有限的离散量</li><li>像素：组成图像、像素值</li></ul><p><img src="'+e+'" alt="Untitled"></p><h3 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to &quot;History&quot;">​</a></h3><p>1963、首次提出、阴极射线管显示器和光笔、交互生成简单图形（Sutherland......）</p><h2 id="section-2" tabindex="-1">Section 2 <a class="header-anchor" href="#section-2" aria-label="Permalink to &quot;Section 2&quot;">​</a></h2><h3 id="图形系统" tabindex="-1">图形系统 <a class="header-anchor" href="#图形系统" aria-label="Permalink to &quot;图形系统&quot;">​</a></h3><p><img src="'+s+'" alt="Untitled"></p><h3 id="视频显示设备" tabindex="-1">视频显示设备 <a class="header-anchor" href="#视频显示设备" aria-label="Permalink to &quot;视频显示设备&quot;">​</a></h3><ul><li><p>刷新式CRT</p><ul><li>聚焦、加速、偏转→荧光屏</li><li>余晖（发光到10％）——长短余晖</li><li>光点——能够显示的最小发光点，硬件最小图像点，物理直径——亮度60%</li><li>屏幕分辨率——无重叠显示的最大光点数（水平*垂直，光点物理直径，DPI）</li><li>显示分辨率——用于显示图像的最大像素数</li></ul></li><li><p>光栅扫描&amp;随机扫描</p><ul><li><p>光栅扫描：自顶向下</p></li><li><p>随机扫描:一次画出一条线</p><p><img src="'+r+'" alt="Untitled"></p><p><img src="'+o+'" alt="Untitled"></p></li></ul></li><li><p>光栅扫描系统</p><ul><li>帧缓存容量计算： <ul><li>色深——像素点信息的长度 <ul><li>黑白——色深为1bit</li><li>彩色——色深为（16色——4bits，256色——8bits）</li></ul></li></ul></li></ul></li><li><p>彩色CRT</p><ul><li>电子穿透法——随机扫描</li><li>荫照法——光栅扫描</li></ul></li><li><p>平板显示器</p><ul><li>发射型和非发射型...</li><li>等离子板 <ul><li>两块带有水平和垂直导电带的玻璃板，之间充斥这氖气</li><li>成对的导电带之间点火，分解为离子和电子构成的发光等离子</li><li>通过<strong>阻塞</strong>或<strong>传递</strong>来自周围的或内部光源的偏振光形成图案</li></ul></li></ul></li></ul><h3 id="软件" tabindex="-1">软件 <a class="header-anchor" href="#软件" aria-label="Permalink to &quot;软件&quot;">​</a></h3><ul><li>分类 <ul><li>通用编程软件包</li><li>专用应用软件包</li></ul></li><li>坐标表示 <ul><li>建模变换、世界坐标、观察变换与投影变换、规范化设备坐标、设备变换</li></ul></li></ul><p><img src="'+n+'" alt="Untitled"></p><h2 id="section-3" tabindex="-1">Section 3 <a class="header-anchor" href="#section-3" aria-label="Permalink to &quot;Section 3&quot;">​</a></h2><ul><li>图元绘制 <ul><li><p>点绘制、像素寻址</p></li><li><p>线绘制：</p><ul><li>DDA：一个坐标上单位间隔取样、另一个坐标上以m或1/m变换</li></ul><p><img src="'+p+'" alt="Untitled"></p><p>评价：没用乘法，比y=m*x+b快、取整和浮点运算耗时、有误差</p><ul><li>Bresenham（0&lt;m&lt;1）</li></ul><p><img src="'+u+'" alt="Untitled"></p><p>看看推导</p><ul><li>中点画线算法</li></ul><p><img src="'+h+'" alt="Untitled"></p></li><li><p>圆生成</p><ul><li>利用对称性</li></ul><p><img src="'+c+'" alt="Untitled"></p><p><img src="'+d+'" alt="Untitled"></p></li></ul></li></ul><h3 id="凹多边形" tabindex="-1">凹多边形 <a class="header-anchor" href="#凹多边形" aria-label="Permalink to &quot;凹多边形&quot;">​</a></h3><p><img src="'+m+'" alt="Untitled"></p><ul><li>叉乘法</li></ul><p><img src="'+_+'" alt="Untitled"></p><ul><li>延长线法</li></ul><h3 id="非标准多边形内部区域的鉴别——作不经过顶点的射线" tabindex="-1">非标准多边形内部区域的鉴别——作不经过顶点的射线 <a class="header-anchor" href="#非标准多边形内部区域的鉴别——作不经过顶点的射线" aria-label="Permalink to &quot;非标准多边形内部区域的鉴别——作不经过顶点的射线&quot;">​</a></h3><ul><li>奇偶规则——射线外穿，奇数内部，偶数外部</li><li>非零环绕数规则——左→右-1 右→左+1 内部区域非0</li></ul><p><img src="'+b+'" alt="Untitled"></p><h3 id="字模构成" tabindex="-1">字模构成 <a class="header-anchor" href="#字模构成" aria-label="Permalink to &quot;字模构成&quot;">​</a></h3><ul><li>点阵式——逐位映射得到字符的字模编码Bitmap <ul><li>易于定义显示，空间需求大，难以变换</li></ul></li><li>矢量式——字符笔画分解成线段，端点坐标为字符字模的编码Stroke <ul><li>空间需求小，时间开销大，无级缩放</li></ul></li></ul><h2 id="section-4" tabindex="-1">Section 4 <a class="header-anchor" href="#section-4" aria-label="Permalink to &quot;Section 4&quot;">​</a></h2><h3 id="图元属性" tabindex="-1">图元属性 <a class="header-anchor" href="#图元属性" aria-label="Permalink to &quot;图元属性&quot;">​</a></h3><ul><li>直接存储：</li></ul><p><img src="'+q+'" alt="Untitled"></p><ul><li>颜色表存储：帧缓存存储颜色查找表索引值</li><li></li></ul><p><img src="'+g+'" alt="Untitled"></p><h3 id="扫描线填充算法" tabindex="-1">扫描线填充算法 <a class="header-anchor" href="#扫描线填充算法" aria-label="Permalink to &quot;扫描线填充算法&quot;">​</a></h3><ul><li>自底向上扫描</li><li>求交——排序——配对——填色</li></ul><h3 id="边界填充算法" tabindex="-1">边界填充算法 <a class="header-anchor" href="#边界填充算法" aria-label="Permalink to &quot;边界填充算法&quot;">​</a></h3><ul><li>填充区域边界以一种颜色指定，从内到外填色</li><li>适用于单色边界</li><li>4连通/8连通</li><li>4连通可能不完整/8连通越界</li></ul><h3 id="反走样" tabindex="-1">反走样 <a class="header-anchor" href="#反走样" aria-label="Permalink to &quot;反走样&quot;">​</a></h3><blockquote><p>图形数字化过程中，由于低频采样而造成的图形畸变→走样</p></blockquote><blockquote><p>通过修改沿图元边界像素的亮度来平滑边界/减少锯齿现象</p></blockquote><ul><li>硬件要求</li><li>抗锯齿方案 <ul><li>过取样技术——高分辨率取样低分辨率显示</li><li>区域取样——通过计算待显示的对象在每个像素上的覆盖区域从而确定像素亮度 <ul><li>像素覆盖区域通过确定对象边界与单个像素边界的相交处而得到</li></ul></li><li>像素移相——通过移动像素区域的显示位置实现反走样 <ul><li>通过与对象几何形状相关的电子束的微定位而作用</li></ul></li><li>子像素加权方案 <ul><li>赋给接近于像素区域中心得子像素更大的权值</li><li>离散的加权方案</li></ul></li></ul></li></ul>',50),k=[U];function x(P,C,B,S,y,T){return t(),i("div",null,k)}const j=l(f,[["render",x]]);export{N as __pageData,j as default};
