import{_ as l,c as i,o as a,a1 as t}from"./chunks/framework.BwTyoF0R.js";const p="/assets/Untitled.BrGGUpbn.png",e="/assets/Untitled%201.CwGOaSJC.png",o="/assets/Untitled%202.rCYP8-k8.png",r="/assets/Untitled%203.BCQTig74.png",s="/assets/Untitled%204.BE99SLiF.png",n="/assets/Untitled%205.BkCDa4BQ.png",d="/assets/Untitled%206.Av-c-O3U.png",_="/assets/Untitled%207.DK6Lm2bT.png",q=JSON.parse('{"title":"Chapter-6-大数据挖掘","description":"","frontmatter":{},"headers":[],"relativePath":"数据挖掘与大数据分析/Chapter-6-大数据挖掘.md","filePath":"数据挖掘与大数据分析/Chapter-6-大数据挖掘.md"}'),c={name:"数据挖掘与大数据分析/Chapter-6-大数据挖掘.md"},h=t('<h1 id="chapter-6-大数据挖掘" tabindex="-1">Chapter-6-大数据挖掘 <a class="header-anchor" href="#chapter-6-大数据挖掘" aria-label="Permalink to &quot;Chapter-6-大数据挖掘&quot;">​</a></h1><h2 id="_1-哈希技术" tabindex="-1">1. 哈希技术 <a class="header-anchor" href="#_1-哈希技术" aria-label="Permalink to &quot;1. 哈希技术&quot;">​</a></h2><ul><li><p>大数据面临的问题</p><ul><li><p>高维诅咒问题</p></li><li><p>存储问题</p></li><li><p>检索速度问题</p></li><li><p><code>example:最近点检索</code></p><p><code>给定一个检索点，如何在数据库中找出最邻近的点呢？</code></p></li></ul></li><li><p>哈希技术的作用</p></li></ul><h3 id="_1-1-最小哈希-可选、近邻" tabindex="-1">1.1 最小哈希（可选、近邻） <a class="header-anchor" href="#_1-1-最小哈希-可选、近邻" aria-label="Permalink to &quot;1.1 最小哈希（可选、近邻）&quot;">​</a></h3><ol><li>定义：首次出现1的行号</li><li>计算签名矩阵</li></ol><h2 id="_2-数据流挖掘" tabindex="-1">2. 数据流挖掘 <a class="header-anchor" href="#_2-数据流挖掘" aria-label="Permalink to &quot;2. 数据流挖掘&quot;">​</a></h2><ol><li><p>什么是：在连续的、不断变化的数据流中发现有用信息的过程。</p></li><li><p>数据流挖掘的挑战</p><ol><li><p>访问一次（单程处理）</p></li><li><p>时间低</p></li><li><p>空间低</p></li><li><p>概念偏移</p><p>数据流中概念或模式随时间的推移而发生变化的现象。</p><p><img src="'+p+'" alt="Untitled"></p></li></ol></li><li><p>概念偏移的检测</p><ol><li>基于分布 <ul><li>对相同时间间隔（窗口）检测P(C|X)，如果检测到变化就说明发生了</li><li>ADWIM：处理当前数据，发生显著性变化就用新的代替老的</li><li>窗口大小不好控制、学习偏移慢、虚假的概念偏移</li></ul></li><li>基于错误率 <ul><li>错误率突然变大，说明有概念偏移</li><li>对噪声敏感，对缓慢变化的数据难以处理，取决于模型的健壮性</li></ul></li></ol></li><li><p>数据流分类</p><ul><li>快速决策树（VFDT）</li></ul></li><li><p>数据流聚类</p><ol><li>线上把数据用合适的数据结构处理，线下用传统方式去进行聚类</li><li>簇特征</li></ol><p><img src="'+e+'" alt="Untitled"></p></li></ol><h2 id="_3-hadoop-spark" tabindex="-1">3. Hadoop/Spark <a class="header-anchor" href="#_3-hadoop-spark" aria-label="Permalink to &quot;3. Hadoop/Spark&quot;">​</a></h2><h3 id="_3-1-什么是hadoop" tabindex="-1">3.1 什么是Hadoop <a class="header-anchor" href="#_3-1-什么是hadoop" aria-label="Permalink to &quot;3.1 什么是Hadoop&quot;">​</a></h3><ol><li><p>什么是Hadoop</p><p>软件框架，用于，用于跨大型计算机集群对大型数据集进行分布式处理 TB PB 级别.</p></li><li><p>Hadoop设计理念</p><ol><li>并行化营参</li><li>容错及一</li><li>Map Reduce</li></ol></li><li><p>Hadoop生态</p></li><li><p>HDFS</p><ol><li>NameNode 元数据</li><li>DataNode 实际数据</li></ol><p><img src="'+o+'" alt="Untitled"></p></li><li><p>Map Reduce</p><ol><li>擅长一轮计算</li><li>没有很好的共享机制</li></ol></li></ol><h3 id="_3-2-spark" tabindex="-1">3.2 Spark <a class="header-anchor" href="#_3-2-spark" aria-label="Permalink to &quot;3.2 Spark&quot;">​</a></h3><ol><li><p>什么是Spark</p><p><img src="'+r+'" alt="Untitled"></p></li><li><p>RDD（弹性式分布式数据集）</p><p><img src="'+s+'" alt="Untitled"></p></li><li><p>擅长多轮</p></li><li><p>API</p></li></ol><p><img src="'+n+'" alt="Untitled"></p><p><img src="'+d+'" alt="Untitled"></p><p><img src="'+_+'" alt="Untitled"></p>',15),m=[h];function u(k,g,U,b,f,C){return a(),i("div",null,m)}const S=l(c,[["render",u]]);export{q as __pageData,S as default};
