import{_ as l,c as i,o as t,a1 as s}from"./chunks/framework.BwTyoF0R.js";const p="/assets/Untitled.DH6JLyUK.png",a="/assets/Untitled%201.DSfgEbum.png",n="/assets/Untitled%202.BZPcQSnc.png",e="/assets/Untitled%203.Cg63tkhR.png",r="/assets/Untitled%204.BNgurlfY.png",o="/assets/Untitled%205.Dh_6DA7-.png",d="/assets/Untitled%206.DPPe8bxw.png",_="/assets/Untitled%207.QTbcFoW5.png",c="/assets/Untitled%208.VubV_QHj.png",u="/assets/Untitled%209.CvrsxwbA.png",g="/assets/Untitled%2010.Bdi_mQMu.png",m="/assets/Untitled%2011.S-7_HvAF.png",h="/assets/Untitled%2012.Bapkxzth.png",U="/assets/Untitled%2013.BXZe_5Zv.png",b="/assets/Untitled%2014.w-ikvO0n.png",q="/assets/Untitled%2015.BN5xuRq2.png",P="/assets/Untitled%2016.DKb34D6I.png",C="/assets/Untitled%2017.3JrIjvtK.png",f="/assets/Untitled%2018.DBBRWxIm.png",I="/assets/Untitled%2019.BhS424ZO.png",D="/assets/Untitled%2020.JpNAV19k.png",S="/assets/Untitled%2021.BTJ5q0wX.png",k="/assets/Untitled%2022.Fyu7Y6gC.png",x="/assets/Untitled%2023.DOr9AICw.png",A="/assets/Untitled%2024.C52gGPUC.png",B="/assets/Untitled%2025.BNEYdwEf.png",M="/assets/Untitled%2026.DMrma4_5.png",y="/assets/Untitled%2027.D-2uXURB.png",T="/assets/Untitled%2028.B3D6IXM1.png",w="/assets/Untitled%2029.kEpb3ymV.png",R="/assets/Untitled%2030.2dprTOa5.png",E="/assets/Untitled%2031.u6UVvVcH.png",V="/assets/Untitled%2032.Z1-U4j62.png",N="/assets/Untitled%2033.D7CVcsUy.png",O="/assets/Untitled%2034.MkvxiHWr.png",j="/assets/Untitled%2035.C73PTeIJ.png",v="/assets/Untitled%2036.Cjjthcos.png",F="/assets/Untitled%2037.B80Z6wru.png",X="/assets/Untitled%2038.CY7jmZNF.png",Z="/assets/Untitled%2039.CwCCGfKY.png",J="/assets/Untitled%2040.Fa4rT5TK.png",K="/assets/Untitled%2041.CNZ-7oEU.png",H="/assets/Untitled%2042.vqi_lqK8.png",Q="/assets/Untitled%2043.BAjw3j7n.png",Y="/assets/Untitled%2044.DwNNrbo3.png",W="/assets/Untitled%2045.BjmAltaT.png",$="/assets/Untitled%2046.BFXBtQ4I.png",G="/assets/Untitled%2047.NFy0cRhw.png",L="/assets/Untitled%2048.DjjDDp6f.png",z="/assets/Untitled%2049.BtBpXXW6.png",ll="/assets/Untitled%2050.Dg57CElL.png",cl=JSON.parse('{"title":"C1 量化设计与分析基础","description":"","frontmatter":{},"headers":[],"relativePath":"计算机体系结构/Chapter1-量化设计与分析基础.md","filePath":"计算机体系结构/Chapter1-量化设计与分析基础.md"}'),il={name:"计算机体系结构/Chapter1-量化设计与分析基础.md"},tl=s('<h1 id="c1-量化设计与分析基础" tabindex="-1">C1 量化设计与分析基础 <a class="header-anchor" href="#c1-量化设计与分析基础" aria-label="Permalink to &quot;C1 量化设计与分析基础&quot;">​</a></h1><h2 id="_1-计算机分类" tabindex="-1">1 计算机分类 <a class="header-anchor" href="#_1-计算机分类" aria-label="Permalink to &quot;1 计算机分类&quot;">​</a></h2><h3 id="_1-1-flynn-s-分类" tabindex="-1">1.1 Flynn’s 分类 <a class="header-anchor" href="#_1-1-flynn-s-分类" aria-label="Permalink to &quot;1.1 Flynn’s 分类&quot;">​</a></h3><ul><li><p>SISD</p><ul><li><p>任一时钟周期，只有一个指令流在cpu执行，只有一个数据流作为输入。</p></li><li><p>确定执行：程序在给定的输入条件下多次运行，执行流程和结果是一致的。</p></li><li><p>对SISD模型改良，采用指令级并行技术：流水线、超标量、推测执行等</p></li><li><p>串行计算机采用的结构</p><p><img src="'+p+'" alt="Untitled"></p></li></ul></li><li><p>SIMD</p><ul><li>一种并行计算机：数据级并行</li><li>任一时钟周期，所有处理单元执行相同指令，每个处理单元能对不同数据元素进行操作。</li><li>同步和确定性执行</li><li>适用于处理高度规整操作的问题，如图像处理</li><li>类型 <ul><li>处理器阵列（Processor Arrays）</li><li>向量流水线（Vector Pipelines）</li><li>标准指令集的多媒体扩展，1996始于Intel  Pentium MMX</li><li>GPU</li></ul></li></ul><p><img src="'+a+'" alt="Untitled"></p><p><img src="'+n+'" alt="Untitled"></p></li><li><p>MISD</p><ul><li>任一时钟周期，单个数据流进入多个处理单元，每个处理单元用单个指令流对数据进行独立操作。</li><li>很少用，可能的应用： <ul><li>多频滤波器对单信号流进行操作</li><li>多重加密算法对单个编码信息进行加密</li></ul></li></ul><p><img src="'+e+'" alt="Untitled"></p><p><img src="'+r+'" alt="Untitled"></p></li><li><p>MIMD</p><ul><li>线程级或任务级并行。</li><li>每个处理器可以执行不同的指令流，可以对不同数据流进行操作</li><li>各处理器执行可以是同步的或异步的，确定性的或非确定性的</li><li>比SIMD更灵活，适应性更强。很适合任务级并行；也可以开发数据级并行，开销比SIMD高。</li><li>多核芯片、多处理器构成的处理器</li></ul><p><img src="'+o+'" alt="Untitled"></p></li></ul><p><img src="'+d+'" alt="Untitled"></p><ul><li>Flynn分类模型是抽象和粗略的： <ul><li>现代的不少并行处理器是SISD、SIMD和MIMD的<strong>混合类型</strong>。</li><li>例如：IBM有一款多核芯片的Cell中，包括8个SIMD的处理单元和1个SISD的Power处理器。 整体看，Cell是一个MIMD处理器。</li></ul></li></ul><h3 id="_1-2-市场分类" tabindex="-1">1.2 市场分类 <a class="header-anchor" href="#_1-2-市场分类" aria-label="Permalink to &quot;1.2 市场分类&quot;">​</a></h3><ul><li><p><strong>个人移动设备</strong></p></li><li><p><strong>桌面计算机</strong></p><ul><li><p>性能评估：基准测试程序</p></li><li><p>个人计算机</p><p>个人计算机主要为一个用户提供良好的计算性能和较低成本的工作环境。最早出现的个人计算机是1977年Apple公司的Apple II 微型计算机。</p></li><li><p>工作站</p><p>工作站是指具有完整人机交互界面、<strong>图形处理性能</strong>和较高计算性能，可配置大容量的内存和硬盘，I/O和网络功能完善，使用<strong>多任务多用户操作系统</strong>的小型通用个人化计算机系统。1983年美国Apollo公司推出了首台适合计算机辅助设计（CAD）的工作站。</p></li></ul></li><li><p><strong>服务器</strong></p><ul><li><p>特性</p><ul><li><p>可靠性（Dependability）</p><p>采用容错技术，如ECC（Error Checking and Correcting）内存、RAID（Redundant Array of Independent Disks）技术、热插拔技术、冗余电源、冗余风扇、机箱锁、口令保护等。</p></li><li><p>可扩展性（Scalability）</p><p>计算能力、存储系统、I／O带宽等。</p></li><li><p>吞吐量（efficient throughput）</p><p>服务器要将其数据和硬件提供给网络用户共享，其主要设计目标就是为了达到高效的吞吐量。的整体性能——以每分钟处理的事务数或每秒所提供的页面数来衡量。</p></li></ul></li><li><p>规模分类：大中小、入门</p></li><li><p>外形与结构：塔式（入门型）、机柜式（中大型）</p></li><li><p>通用开放：通用开放系统（采用<strong>IA32架构服务器</strong>。性价比高）、非开放（RISC处理器的服务器，操作系统一般基于Unix、结构封闭、高可靠性、高速）</p></li></ul></li><li><p><strong>集群/仓库级计算机</strong></p><ul><li>一组桌面机或服务器通过局域网连接，运行时像一个大型计算机系统。</li><li>关键问题：性价比、吞吐量、可靠性</li><li>特殊问题：配电，制冷</li></ul></li><li><p><strong>嵌入式计算机</strong></p><ul><li>硬件部分：嵌入式微处理器、存储器、I/O接口、外设部件等；</li><li>软件部分：操作系统软件 ( 要求实时和多任务操作 ) 、应用软件。 <ul><li>实时性能 (soft &amp; hard)</li><li>严格的资源限制：有限的的存储空间, 低功耗消费,...</li><li>处理器核心与特定应用电路在一起使用（DSP、Digital TV）</li></ul></li><li><strong>嵌入式与非嵌入式的区别：能否运行第三方软件。</strong></li></ul></li></ul><h2 id="_2-计算机系统结构定义和设计任务" tabindex="-1">2. 计算机系统结构定义和设计任务 <a class="header-anchor" href="#_2-计算机系统结构定义和设计任务" aria-label="Permalink to &quot;2. 计算机系统结构定义和设计任务&quot;">​</a></h2><h3 id="_2-1-原始概念" tabindex="-1">2.1 原始概念 <a class="header-anchor" href="#_2-1-原始概念" aria-label="Permalink to &quot;2.1 原始概念&quot;">​</a></h3><p>程序员（机器语言）看见的（计算机）系统属性，即慨念性结构和功能行为，以区分数据流动和控制逻辑设计的组成及物理实现。</p><p><img src="'+_+'" alt="Untitled"></p><ul><li><p>计算机系统结构：机器语言程序员看到的创痛及其级所具有的主要属性——ISA</p></li><li><p>计算机组成：计算机系统结构的逻辑实现（五大功能不见组成以及逻辑设计）</p></li><li><p>计算机实现：计算机组成的物理实现，器件技术占主导作用</p></li><li><p>例：</p><p>① 主存容量与编址方式(按位、按字节、按字访问等)的确定属于<strong>计算机系统结构</strong>。</p><p>② 为达到所定性能价格比，主存速度应多快，在逻辑结构上需采用什么措施(如多体交叉存储等)属于<strong>计算机组成</strong></p><p>③ 主存系统的物理实现，如存储器器件的选定、逻辑电路的设计、微组装技术的选定属于<strong>计算机实现</strong>。</p></li><li><p>计算机系统结构、组成和实现三者的相互影响</p><ul><li>**具有相同计算机系统结构(指令系统相同)的计算机，因为速度要求不同等因素可以采用不同的计算机组成。**如，取指令、译码、取操作数、运算、存结果可以在时间上按顺序方式进行，也可以让它们在时间上按流水线重叠方式进行以提高执行速度。</li><li><strong>一种计算机组成可以采用多种不同的计算机实现</strong>。例如，主存器件可以采用SRAM芯片，也可以采用DRAM芯片。</li></ul></li></ul><h3 id="_2-2系列机" tabindex="-1">2.2系列机 <a class="header-anchor" href="#_2-2系列机" aria-label="Permalink to &quot;2.2系列机&quot;">​</a></h3><p><strong>相同的系统结构，具有不同组成和实现的一系列不同型号的计算机。</strong></p><ul><li>软件兼容性：同一个软件可以不加修改地运行于系统结构相同的各档机器上，而且运行结果一样，差别只是运行时间不同。 <ul><li>向后兼容：在某一时间生产的机器上运行的目标软件能够直接运行于更晚生产的机器上。</li><li>向上兼容：在低档机器上运行的目标软件能够直接运行于高档机器上。</li></ul></li><li>缺点：要求体系结构基本不改变，这无疑又妨碍了计算机体系结构的发展。</li></ul><h3 id="_2-3-isa" tabindex="-1">2.3 ISA <a class="header-anchor" href="#_2-3-isa" aria-label="Permalink to &quot;2.3 ISA&quot;">​</a></h3><p><strong>硬件与软件之间的接口</strong></p><ul><li>角色 <ul><li>开发者与硬件之间的接口</li><li>两代芯片之间的合同</li></ul></li><li>好的接口 <ul><li>多种实现</li><li>用于不同方面</li><li>为更高层提供功能方便</li><li>允许更低层能有效实现</li></ul></li><li>7个重要特征 <ul><li>ISA的类型：现代通用寄存器结构，早期累加器结构</li><li>存储器访问：如，按字节访问</li><li>寻址方式</li><li>操作数类型和大小：8位字符，32位整型数</li><li>操作类型：数据传输，算术/逻辑</li><li>控制流指令：转移，子程序调用/返回</li><li>ISA编码：固定长度，可变长度</li></ul></li></ul><p><img src="'+c+'" alt="Untitled"></p><p><img src="'+u+'" alt="Untitled"></p><p><img src="'+g+'" alt="Untitled"></p><p><img src="'+m+'" alt="Untitled"></p><h3 id="_2-4-计算机系统结构的现代定义" tabindex="-1">2.4 计算机系统结构的现代定义 <a class="header-anchor" href="#_2-4-计算机系统结构的现代定义" aria-label="Permalink to &quot;2.4 计算机系统结构的现代定义&quot;">​</a></h3><p>是在满足功能、性能和价格目标的条件下，设计、选择和互连硬件部件构成计算机。</p><ul><li><p>覆盖的内容</p><ul><li>指令系统设计（系统结构的原始定义）</li><li>组成：计算机设计方面的高层次（CPU内部结构、存储器、I/O系统、多处理器、网络）</li><li>硬件: 计算机的具体实现技术（详细逻辑设计、封装、冷却系统、板级设计，功耗等）</li></ul></li><li><p>相关课题</p><ul><li>单处理器</li></ul><p><img src="'+h+'" alt="Untitled"></p><ul><li>多处理器</li></ul><p><img src="'+U+'" alt="Untitled"></p></li><li><p>影响计算机系统结构的因素‘</p><ul><li>计算机系统结构是这些技术发展的核心。</li></ul><p><img src="'+b+'" alt="Untitled"></p></li><li><p>计算机设计的任务</p><ol><li>定义用户需求 <ul><li><strong>功能需求</strong><ul><li>应用领域：5种计算机</li><li>软件兼容级别</li><li>OS 需求</li><li>标准：浮点、I/O接口、OS、网络等</li></ul></li><li><strong>非功能需求：</strong><ul><li>性价比</li><li>可用性，可扩展性，吞吐量, ...</li><li>功耗，大小，温度， ...</li></ul></li><li>考虑计算机应用 <ul><li>声称设计通用处理器，但是实际上是针对特定应用</li><li><strong>结构能够调整以适应应用</strong></li></ul></li></ul></li><li>确定一台新计算机的重要属性，必须是在考虑成本 、功耗、可用性等限制下使其性能最优。 <ul><li>指令集（系统）结构ISA设计</li><li>功能组成</li><li>计算机设计的高级方面，如：CPU内部结构设计，存储系统和总线结构。</li><li>逻辑设计( hardware )</li><li>实现 (hardware )</li></ul></li></ol></li><li><p>工程方法</p><p><img src="'+q+'" alt="Untitled"></p></li><li><p>总结</p><p><img src="'+P+'" alt="Untitled"></p></li></ul><h2 id="_3-实现技术的趋势" tabindex="-1">3 实现技术的趋势 <a class="header-anchor" href="#_3-实现技术的趋势" aria-label="Permalink to &quot;3 实现技术的趋势&quot;">​</a></h2><h3 id="_3-1-摩尔定律" tabindex="-1">3.1 摩尔定律 <a class="header-anchor" href="#_3-1-摩尔定律" aria-label="Permalink to &quot;3.1 摩尔定律&quot;">​</a></h3><p>1965年，他预测工业界集成在一个计算机芯片上的元件数量每年翻一番。 1975年，他更新预测为每两年翻一番。</p><p>这已经成为半导体工业界在降低电子器件成本的同时提供更强大芯片的指导原则。</p><ul><li><p>经验法则</p><p>成本减少速度与密度增加速度成比例</p></li><li><p>技术阈值</p><p>对设计有重大影响，实现技术在持续改进到阈值，就会使设计发生飞跃。</p></li><li><p>性能参数</p><ul><li>带宽/吞吐量 : 在给定时间完成的工作总量</li><li>时延/响应时间: 一个事件从开始到完成的时间</li><li>带宽改进优于时延</li><li>经验法则（Rule of thumb） <ul><li>带宽增加速度与时延平方改进速度成比例</li></ul></li></ul><p><img src="'+C+'" alt="Untitled"></p></li><li><p>集成电路的技术挑战</p><p><img src="'+f+'" alt="Untitled"></p></li></ul><h3 id="_3-2-例题" tabindex="-1">3.2 例题 <a class="header-anchor" href="#_3-2-例题" aria-label="Permalink to &quot;3.2 例题&quot;">​</a></h3><p>🤔 例题</p><p><img src="'+I+'" alt="Untitled"></p><p><img src="'+D+'" alt="Untitled"></p><p><img src="'+S+'" alt="Untitled"></p><p><img src="'+k+'" alt="Untitled"></p><p><img src="'+x+'" alt="Untitled"></p><p><img src="'+A+'" alt="Untitled"></p><h2 id="_4-集成电路功耗的趋势" tabindex="-1">4 集成电路功耗的趋势 <a class="header-anchor" href="#_4-集成电路功耗的趋势" aria-label="Permalink to &quot;4 集成电路功耗的趋势&quot;">​</a></h2><ul><li><p>集成电路功耗上的技术挑战：</p><ul><li>分配功率</li><li>散热</li><li>避免过热点</li></ul></li><li><p>源头</p><ul><li>晶体管数量的增加</li></ul><p><img src="'+B+'" alt="Untitled"></p></li></ul><h3 id="_4-1-功率" tabindex="-1">4.1 功率 <a class="header-anchor" href="#_4-1-功率" aria-label="Permalink to &quot;4.1 功率&quot;">​</a></h3><ul><li><p>动态功率：开关晶体管产生的功率</p></li><li><p>静态功率：关闭时漏电产生的功率</p></li><li><p>经验法则</p><p><img src="'+M+'" alt="Untitled"></p></li></ul><h3 id="_4-2-功耗" tabindex="-1">4.2 功耗 <a class="header-anchor" href="#_4-2-功耗" aria-label="Permalink to &quot;4.2 功耗&quot;">​</a></h3><ul><li><p>单双核功耗、性能比较</p><p><img src="'+y+'" alt="Untitled"></p></li><li><p>多核的功耗</p><p><img src="'+T+'" alt="Untitled"></p></li></ul><h2 id="_5-成本的趋势" tabindex="-1">5 成本的趋势 <a class="header-anchor" href="#_5-成本的趋势" aria-label="Permalink to &quot;5 成本的趋势&quot;">​</a></h2><ul><li><p>影响元器件成本的因素</p><ul><li>Time 时间：随时间而下降（实现技术没有实质性改进）</li><li>Volume 产量：<strong>产量提高意味着制造效率提高，成本就越低</strong></li><li>Commodification 商品：元器件供应商之间的竞争会降低成本</li></ul><p><img src="'+w+'" alt="Untitled"></p></li><li><p>每个集成电路成本的计算</p><p><img src="'+R+'" alt="Untitled"></p><p><img src="'+E+'" alt="Untitled"></p></li></ul><h2 id="_6-可靠性" tabindex="-1">6 可靠性 <a class="header-anchor" href="#_6-可靠性" aria-label="Permalink to &quot;6 可靠性&quot;">​</a></h2><ul><li><p>广义上包括可靠性、安全性和可用性</p></li><li><p>相关计算点</p><p><img src="'+V+'" alt="Untitled"></p><p><img src="'+N+'" alt="Untitled"></p></li><li><p>提高可靠性的方法</p><ul><li>冗余（Redundancy） <ul><li>时间冗余：重复操作直到无错</li><li>资源冗余：配置另外的相同部件，有错时用于替代出错部件</li></ul></li></ul></li></ul><aside> 🤔 例题 <p><img src="'+O+'" alt="Untitled"></p></aside><h2 id="_7-评价指标" tabindex="-1">7 评价指标 <a class="header-anchor" href="#_7-评价指标" aria-label="Permalink to &quot;7 评价指标&quot;">​</a></h2><ol><li><p>响应时间</p></li><li><p>CPU时间=用户CPU++系统CPU</p></li><li><p>吞吐量</p><ol><li>通常改善响应时间就会改善吞吐量</li><li>存在只改善吞吐量而不改善响应时间</li></ol><p><img src="'+j+'" alt="Untitled"></p></li></ol><h2 id="_8-评价方法" tabindex="-1">8 评价方法 <a class="header-anchor" href="#_8-评价方法" aria-label="Permalink to &quot;8 评价方法&quot;">​</a></h2><ol><li>基准测试程序 <ol><li>最好的基准测试程序就是实际应用程序，因为它们反应了终端用户的需要。</li></ol></li><li>SPEC测试程序——实用基准测试程序集 <ol><li><p>SPEC Ratio</p><p><img src="'+v+'" alt="Untitled"></p></li><li><p>SM（Spec mark）——是被测试计算机执行n个基准测试程序分别得到的SPEC率的几何平均值。</p></li></ol></li></ol><p><img src="'+F+'" alt="Untitled"></p><p><img src="'+X+'" alt="Untitled"></p><p><img src="'+Z+'" alt="Untitled"></p><h2 id="_9-量化原则" tabindex="-1">9 量化原则 <a class="header-anchor" href="#_9-量化原则" aria-label="Permalink to &quot;9 量化原则&quot;">​</a></h2><ol><li><p>Amdahl’s 定律</p><ol><li>可以计算出通过改进计算机某一部分而能获得的性能增益。</li><li>Amdahl’s 定律定义了使用某一特定功能所获得的加速比</li></ol><p><img src="'+J+'" alt="Untitled"></p><p><img src="'+K+'" alt="Untitled"></p><p><img src="'+H+'" alt="Untitled"></p><p><img src="'+Q+'" alt="Untitled"></p></li><li><p>CPU性能公式</p><p><img src="'+Y+'" alt="Untitled"></p><p><img src="'+W+'" alt="Untitled"></p><p><img src="'+$+'" alt="Untitled"></p><p><img src="'+G+'" alt="Untitled"></p><p><img src="'+L+'" alt="Untitled"></p><p><img src="'+z+'" alt="Untitled"></p><p><img src="'+ll+'" alt="Untitled"></p></li></ol>',59),sl=[tl];function pl(al,nl,el,rl,ol,dl){return t(),i("div",null,sl)}const ul=l(il,[["render",pl]]);export{cl as __pageData,ul as default};
